type: window # single|window, maybe add opt
key: TEST #added to the csv names
evaluation: evaluation
data:
  name: 30music #added in the end of the csv names
  folder: data/30music/window/
  prefix: 30music
  slices: 1
  #opts: {sessions_test: 50}
params:
  num_sessions: 20000
  num_predicts: 20
output:
  folder: results/ir/test/30music/
results:
  folder: results/ir/test/30music/

metrics:
- class: accuracy.HitRate
  length: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
- class: accuracy.MRR
  length: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
- class: coverage.Coverage
  length: [20]
- class: popularity.Popularity
  length: [20]
- class: time_memory_usage.Time_usage_training
- class: time_memory_usage.Time_usage_testing
- class: time_memory_usage.Memory_usage

algorithms:
- class: IR.ir_model.IRModel
  params: { k: 50, tf_type: 'raw', idf_type: 'default', item_ranking_method: 'sequential_alignment', aggregate_method: 'borda', cut: 10 }
  key: ir_tf_idf
#- class: IR.ir_model.IRModel
#  params: { k: 50, tf_type: 'raw', idf_type: 'default', item_ranking_method: 'sequential_alignment', aggregate_method: 'borda', cut: 5 }
#  key: ir_tf_idf
#- class: IR.ir_model.IRModel
#  params: { k: 50, tf_type: 'raw', idf_type: 'default', item_ranking_method: 'sequential_alignment', aggregate_method: 'borda', cut: 20 }
#  key: ir_tf_idf
#- class: IR.ir_model.IRModel
#  params: { k: 50, tf_type: 'raw', idf_type: 'default', item_ranking_method: 'sequential_alignment', aggregate_method: 'borda', cut: 30 }
#  key: ir_tf_idf
