type: single # single|window, maybe add opt
key: dynamic #added to the csv names
evaluation: evaluation_online

data:
  name: 30music #added in the end of the csv names
  folder: data/30music/raw/
  prefix: 30music
  slice_num:
  #slice_num: 2
  #name: rsc15 #added in the end of the csv names
  #folder: data/rsc15/prepared/
  #prefix: yoochoose-clicks-100k
  #slice_num:   #only window
  opts: {sessions_test: 1000}
params:
  num_sessions: 20000
  num_predicts: 20
output:
  folder: results/ir/next/30music/
results:
  folder: results/ir/next/30music/

metrics:
##- class: accuracy_multiple.Precision
##  length: [1, 3,5,10,15,20]
##- class: accuracy_multiple.Recall
##  length: [1,3,5,10,15,20]
##- class: accuracy_multiple.MAP
##  length: [3,5,10,15,20]
##- class: accuracy_multiple.NDCG
##  length: [3,5,10,15,20]
- class: accuracy.HitRate
  length: [1,3,5,10,15,20]
- class: accuracy.MRR
  length: [3,5,10,15,20]
- class: accuracy_multiple.NDCG
  length: [3,5,10,15,20]
- class: coverage.Coverage
  length: [20]
- class: popularity.Popularity
  length: [20]
- class: time_memory_usage.Time_usage_training
- class: time_memory_usage.Time_usage_testing
- class: time_memory_usage.Memory_usage

algorithms:
#- class: gru4rec.gru4rec.GRU4Rec
#  params: { loss: 'top1-max', final_act: 'linear', dropout_p_hidden: 0.1, learning_rate: 0.08, momentum: 0.1 }
#  key: gru4rec-best
#- class: baselines.markov_upd.MarkovModel
#  params: {}
#  key: markov
- class: IR.ir_model_mk.IRModel
  params: { k: 1000 }
  key: ir_mc
- class: baselines.markov.MarkovModel
  params: {}
  key: markov
- class: baselines.ar.AssociationRules
  params: {}
  key: ar
- class: baselines.sr.SequentialRules
  params: { steps: 30, weighting: quadratic }
  key: sr
- class: knn.sknn.ContextKNN
  params:
    k: 100
    sample_size: 500
    similarity: cosine
  key: sknn
- class: knn.vsknn.VMContextKNN
  params:
    k: 500
    sample_size: 10000
    weighting: quadratic
    weighting_score: quadratic
  key: vsknn
